{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAsCC,mBAAU,IAAhD,mBAAQC,EAAR,KAAoBC,EAApB,KAcA,OACI,qCACI,6BAAMD,IACN,sBAAME,SAXO,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMd,SACI,uBACQO,KAAK,OACLC,MAAQT,EACRU,SAnBM,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,gB,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE6CC,UAAUH,GAFvD,sDAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACjC,MAAO,CACHF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QAVnB,kBAcZM,GAdY,4CAAH,sDCEPM,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IAGtC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAQd,EAAMe,IAAQN,IAC3B,4BAAKA,QCJJO,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAEvB,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAW,WACPvB,EAASC,GACAuB,MAAM,SAAAC,GAGHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAO1B,CAAEnB,IAEEoB,EDrB2BK,CAAczB,GAAlCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAY,oCAAhB,SAAsDf,IAEpDmB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAGYH,EAAOH,KAAK,SAAEiB,GAAF,OACR,cAAC,EAAD,eACmBA,GADCA,EAAIhB,aEdvCiB,EAAe,WAGxB,MAAsCzC,mBAAS,CAAC,cAAhD,mBAAQ0C,EAAR,KAAoB3C,EAApB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEY2C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CACYA,SAAWA,GADLA,Y,MCjB9C6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c2a717a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [ inputValue, setInputValue ] = useState( '');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value )\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h1>{ inputValue }</h1>\r\n            <form onSubmit={ handleSubmit }>\r\n                <input  \r\n                        type=\"text\"\r\n                        value={ inputValue }\r\n                        onChange={ handleInputChange }/>\r\n\r\n            </form>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=20&q=${ encodeURI(category)  }&api_key=B6epyS65FB008qZzjQTqaZKmgyzUNtYB`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( ({ id, title, images }) => {\r\n        return {\r\n            id,\r\n            title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n \r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    \r\n  \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = { url } alt = { title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem'; \r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className = \"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                    {\r\n                        images.map( ( img ) => (\r\n                            <GifGridItem  key={ img.id }\r\n                                          { ...img }></GifGridItem>\r\n                            \r\n                        ))\r\n                    }\r\n              \r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport {getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n                .then( imgs => {\r\n                    \r\n        \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n    \r\n\r\n                  \r\n                        \r\n                });\r\n    }, [ category ]);  // Ejecuta lainstruccion cuando el componente se renderiza por primera vez\r\n                        // Si la categoria cambia vuelve a ejecutar este efecto\r\n    return state; \r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GitGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [ categories, setCategories ] = useState(['One Punch']);\r\n\r\n    /* const handleAdd = () => {\r\n        // setCategories( [...categories, 'HunterXHunter'] );\r\n        setCategories( (cats => [ ...cats, 'HunterXHunter' ] ) )\r\n    } */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                    {\r\n                        categories.map( (category) => (\r\n                            <GifGrid    key={ category }\r\n                                        category={ category }></GifGrid>\r\n                        ))\r\n                    }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}